<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit
Implements ILoadAdapter
Implements IJabacoContainer
Implements ComponentListener 
Dim bLoaded As Boolean

' *** Variables for Anchor and resizing ***
Private myAnchor As AnchorStyles = AnchorStyles.vbTopLeft
Private mySavedWidth As Single
Private mySavedHeight As Single
Private mySavedLeft As Single
Private mySavedTop As Single
Private hostSavedWidth As Single
Private hostSavedHeight As Single
Private isResizeTriggerInitialized As Boolean = False
Private isLeftInitialized As Boolean = False
Private isTopInitialized As Boolean = False
Private countTop As Boolean = False ' variable for a very bad hack
Private countLeft As Boolean = False ' variable for a very bad hack
Dim RadioButtonGroup As New ButtonGroup

Public Sub Usercontrol()
   Call Parent.addComponentListener(Me)
End Sub

Public Sub componentHidden(e As ComponentEvent)
End Sub

Public Sub componentMoved(e As ComponentEvent)
End Sub

Public Sub componentResized(e As ComponentEvent)
   On Error Resume Next
   AnchorResize()
   If bLoaded Then 
      Me.Usercontrol_Resize()
   End If
End Sub

Public Sub componentShown(e As ComponentEvent)
End Sub

Public Property Get ScaleWidth() As Single
   ScaleWidth = Width
End Property

Public Property Get ScaleHeight() As Single
   ScaleHeight = Height
End Property

Public Sub fireLoaded()
   Dim tmpFireAdapter As New LoadAdapter(Me, Me)
   tmpFireAdapter.fireLoaded()
End Sub

Public Sub fireLoaded(sender As Object)
   Me.Usercontrol_Initialize()
   bLoaded = True
   Call Me.Usercontrol_Resize()
End Sub

Public Property Get Width() As Single
    Width = Me.getSize.Width
End Property

Public Property Let Width(v As Single)
    Me.setSize(v, Me.getSize.Height)
End Property

Public Property Get Height() As Single
    Height = Me.getSize.Height
End Property

Public Property Let Height(v As Single)
    Me.setSize(Me.getSize.Width, v)
End Property

Public Property Get Left() As Single
    Left = Me.getLocation.x
End Property

Public Property Let Left(v As Single)
    If countLeft = False Then  ' *** Very bad hack only for Usercontrol, but I don't know
      countLeft = True         ' ***  currently a better solution. First count is everytime zero
    ElseIf isLeftInitialized = False Then
       mySavedLeft = v
       isLeftInitialized = True
    End If
    Me.setLocation(v, Me.getLocation.y)
End Property

Public Property Get Top() As Single
    Top = Me.getLocation.y
End Property

Public Property Let Top(v As Single)
    If countTop = False Then  ' *** Very bad hack only for Usercontrol, but I don't know
      countTop = True         ' ***  currently a better solution. First count is everytime zero
    ElseIf isTopInitialized = False Then
       mySavedTop = v
       isTopInitialized = True
    End If
    Me.setLocation(Me.getLocation.x, v)
End Property

Public Property Get Anchor() AS AnchorStyles
   Anchor = myAnchor
End Property

Public Property Let Anchor(val As AnchorStyles)
   myAnchor = val
End Property

Public Property Get Font() As Font
   Font = Parent.getFont()
End Property

Public Sub Usercontrol_Initialize()
End Sub
Public Sub Usercontrol_Click()
End Sub
Public Sub Usercontrol_DblClick()
End Sub
Public Sub Usercontrol_GotFocus()
End Sub
Public Sub Usercontrol_KeyDown(KeyCode As Integer, Shift As Integer)
End Sub
Public Sub Usercontrol_KeyPress(KeyAscii As Integer)
End Sub
Public Sub Usercontrol_KeyUp(KeyCode As Integer, Shift As Integer)
End Sub
Public Sub Usercontrol_LostFocus()
End Sub
Public Sub Usercontrol_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Usercontrol_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Usercontrol_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Usercontrol_MouseEntered()
End Sub
Public Sub Usercontrol_MouseExited()
End Sub
Public Sub Usercontrol_Paint(g As java#awt#Graphics)
End Sub
Public Sub Usercontrol_Resize()
End Sub
Public Sub Usercontrol_MenuClick(MenuItem As IMenuItem)
End Sub
Public Sub Usercontrol_ToolBarClick(ToolBarItem As IToolBarItem)
End Sub

'Public Sub Usercontrol_Terminate()
'End Sub
Public Sub Usercontrol_Unload(Cancel As Integer)
End Sub
'Public Sub Class_Initialize()
'   Call Base.Class_Initialize()
'End Sub
Public Sub _Click()
   Me.Usercontrol_Click()
End Sub
Public Sub _DblClick()
   Me.Usercontrol_DblClick()
End Sub
Public Sub _GotFocus()
   Me.Usercontrol_GotFocus()
End Sub
Public Sub _KeyDown(KeyCode As Integer, Shift As Integer)
   Me.Usercontrol_KeyDown(KeyCode, Shift)
End Sub
Public Sub _KeyPress(KeyAscii As Integer)
   Me.Usercontrol_KeyPress(KeyAscii)
End Sub
Public Sub _KeyUp(KeyCode As Integer, Shift As Integer)
   Me.Usercontrol_KeyUp(KeyCode, Shift)
End Sub
Public Sub _LostFocus()
   Me.Usercontrol_LostFocus()
End Sub
Public Sub _MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Me.Usercontrol_MouseDown(Button, Shift, X, Y)
End Sub
Public Sub _MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Me.Usercontrol_MouseMove(Button, Shift, X, Y)
End Sub
Public Sub _MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Me.Usercontrol_MouseUp(Button, Shift, X, Y)
End Sub
Public Sub _MouseEntered()
   Me.Usercontrol_MouseEntered()
End Sub
Public Sub _MouseExited()
   Me.Usercontrol_MouseExited()
End Sub
Public Sub _Paint(g As java#awt#Graphics)
   Me.Usercontrol_Paint(g)
End Sub

'Public Sub _Terminate()
'End Sub

Public Sub _Unload(Cancel As Integer)
   Me.Usercontrol_Unload(Cancel)
End Sub

Public Property Get ContentFrame() As PictureBox 
   ContentFrame = Base
End Property

Private Sub SetZOrder(Component As java#awt#Component)
   On Error Resume Next
   Dim ParentV As Variant
   ParentV = Parent
   ParentV.setComponentZOrder Component, 0 ' set last component on top
End Sub

Public Sub add(Component As java#awt#Component)
   If IsClass(Component, VB#IJabacoControl) Then
      Dim Component2 As VB#IJabacoControl = Cast(Component, VB#IJabacoControl)
      Component2.ResizeTriggerInit(Me.Width, Me.Height)
   End If
   
   Parent.add Component
   Call SetZOrder(Component)
   On Error Resume Next
   Dim ComponentCB As javax#swing#JCheckBox 
   ComponentCB = Cast(Component, javax#swing#JCheckBox)
   If ComponentCB <> Null Then
      Exit Sub ' not in abstractbutton-handler
   End If
   Dim ComponentAB As AbstractButton
   ComponentAB = Cast(Component, AbstractButton)
   If ComponentAB <> Null Then
      RadioButtonGroup.add ComponentAB
   End If
End Sub


Public Sub ResizeTriggerInit(w As Single, h As Single)
   hostSavedWidth = w
   hostSavedHeight = h
   mySavedWidth = Me.Width
   mySavedHeight = Me.Height
   isResizeTriggerInitialized = True
End Sub

Public Sub ResizeTrigger(w As Single, h As Single)
   If isResizeTriggerInitialized = True And isLeftInitialized = True And isTopInitialized = True Then  
      Select Case myAnchor And 12 ' horizontal re-allignment
        ' 12 in decimal = 1100 in binary. binary addition - eliminates Top and Bottom
      Case AnchorStyles.vbLeft
         ' do nothing
      Case AnchorStyles.vbRight
        Me.Left = w-hostSavedWidth+mySavedLeft
      Case AnchorStyles.vbLeftRight
        Me.Width = w-hostSavedWidth+mySavedWidth
      Case AnchorStyles.vbNone
        Me.Left = (w-mySavedWidth)/(hostSavedWidth-mySavedWidth)*mySavedLeft
      End Select

      Select Case myAnchor And 3 ' vertical re-allignment
        ' 3 in decimal = 0011 in binary. binary addition - eliminates Left and Right
      Case AnchorStyles.vbTop
         ' do nothing
      Case AnchorStyles.vbBottom
         Me.Top = h-hostSavedHeight+mySavedTop
      Case AnchorStyles.vbTopBottom
         Me.Height = h-hostSavedHeight+mySavedHeight
      Case AnchorStyles.vbNone
         Me.Top = (h-mySavedHeight)/(hostSavedHeight-mySavedHeight)*mySavedTop
      End Select
   End If
End Sub

Private Sub AnchorResize ' Let the added component resize, if its Anchor wants it
   Dim comp() As java#awt#Component
   Dim i As Integer
   comp = Me.getComponents()
 
   For i = 0 To Ubound(comp)
      If IsClass(comp(i), VB#IJabacoControl) Then
         Dim myCont As VB#IJabacoControl
         myCont = Cast(comp(i) , VB#IJabacoControl)
         myCont.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      End If
   Next i
End Sub

]]></Source><Param Name="(Name)" Value="Usercontrol"/><Param Name="(SuperClass)" Value="VB/PictureBox"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/><Param Name="(NameSpace)" Value="VB"/></SourceFile>
