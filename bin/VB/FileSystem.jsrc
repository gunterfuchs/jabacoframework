<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Enum VBFileMode
   Random
   Binary
   Append
   Input
   Output
End Enum

Enum VBFileAccess
   Read
   Write
   ReadAndWrite
End Enum

Enum VBFileLock
   Shared
   LockRead
   LockWrite
   LockReadAndWrite
End Enum

Enum VbFileAttribute
   vbNormal    = &H0
   vbReadOnly  = &H1
   vbHidden    = &H2
   vbSystem    = &H4
   vbVolume    = &H8
   vbDirectory = &H10
   vbArchive   = &H20
   vbAlias     = &H40
End Enum

Dim myFHList(255) As VBFileHandler 
Dim myCurIndex As Integer
Dim myCurFHnd  As VBFileHandler
Dim myFilePos  As Integer = 1 ' aka Seek

'OlimilO 26.oct.2009
'Public Function FreeFile(Optional RangeNumber As Variant) As Integer
'in VB6 originally there were two Lists:
'RangeNumber = 0:  FreeFile returns 1-255
'RangeNumber = 1:  FreeFile returns 256-512
'End Function
Public Function FreeFile() As Integer
   Dim i As Integer = 1
   'the lowest  number is 1
   'the highest number is 255
   While (myFHList(i) <> Nohting)
      i = i + 1
      If i > 255 Then
         Throw New java#io#IOException
      End If
   Wend
   myCurIndex = i
   FreeFile = myCurIndex
End Function
Private Sub SetCurFileHandler(FileNr As Integer)
   If FileNr > 255 Then Throw New java#lang#ArrayIndexOutOfBoundsException 'remove if you want to extend to 512
   If FileNr > 512 Then Throw New java#lang#ArrayIndexOutOfBoundsException
   
   If myCurIndex <> FileNr Then
      myCurIndex = FileNr
	  myCurFHnd = myFHList(myCurIndex)
	  If myCurFHnd = Nothing Then Throw New java#lang#IllegalArgumentException
   End If
End Sub

Public Function Open(Path As String) As VBFileHandler
   Open = Open(Path, Random)
End Function

Public Function Open(Path As String, Mode As VBFileMode) As VBFileHandler
   Open = Open(Path, Mode, ReadAndWrite)
End Function

Public Function Open(Path As String, Mode As VBFileMode, Access As VBFileAccess) As VBFileHandler
   Open = Open(Path, Mode, Access, Shared)
End Function

Public Function Open(Path As String, Mode As VBFileMode, Access As VBFileAccess, Lock As VBFileLock) As VBFileHandler
   Dim tmpHandler As New VBFileHandler 
   tmpHandler.Mode = Mode
   tmpHandler.Access = Access
   tmpHandler.Lock = Lock
   tmpHandler.Filename = Path  
   Open = tmpHandler 
End Function

Public Sub Open(Path As String, Mode As VBFileMode, FileNr As Integer) 
   Open(Path, Mode, ReadAndWrite, Shared, FileNr)   
End Sub

Public Sub Open(Path As String, Mode As VBFileMode, Access As VBFileAccess, FileNr As Integer) 
   Open(Path, Mode, Access, Shared, FileNr)   
End Sub

Public Sub Open(Path As String, Mode As VBFileMode, Access As VBFileAccess, Lock As VBFileLock, FileNr As Integer) 
'OlimilO 27.10.2009
   If FileNr > 255 Then Throw New java#io#IOException 'remove if you want to extend to 512
   If FileNr > 512 Then Throw New java#io#IOException
   myFHList(FileNr) = Open(Path, Mode, Access, Lock)
   SetCurFileHandler(FileNr)
End Sub

Public Function EOF(Handler As VBFileHandler) As Boolean
   If Handler = Nothing Then EOF = True: Exit Function
   EOF = Handler.EOF 
End Function
Public Function EOF(FileNr As Integer) As Boolean
   SetCurFileHandler(FileNr)
   EOF = myCurFHnd.EOF
End Function

Public Function Write(Handler As VBFileHandler, Text As String) As VBFileHandler
   If Handler = Nothing Then Exit Function
   'Handler.writeString Text
   Call Put(Handler, Text, myFilePos)
   myFilePos = myFilePos + Len(Text)
End Function
Public Sub Write(FileNr As Integer, Text As String)
   SetCurFileHandler(FileNr)
   'Call Write(myCurFHnd, sLine & vbCrLf)
   Call Put(myCurFHnd, Chr(34) & Text & Chr(34) & vbCrLf, myFilePos)   
   myFilePos = myFilePos + Len(Text) + 4
End Sub
Public Sub Write(FileNr As Integer, Text As String, nx As Variant)
   SetCurFileHandler(FileNr)
   'Call Write(myCurFHnd, sLine & vbCrLf)
   Call Put(myCurFHnd, Chr(34) & Text & Chr(34), myFilePos)
   myFilePos = myFilePos + Len(Text) + 2
End Sub
Public Function Append(Handler As VBFileHandler, Text As String) As VBFileHandler
   If Handler = Nothing Then Exit Function
   Handler.appendString Text
End Function

Public Function Put(Handler As VBFileHandler, Text As String, Pos As Integer) As VBFileHandler
   If Handler = Nothing Then Exit Function
   Handler.putString Text, Pos
End Function
'Public Sub Get(FileNr, Pos, VBTypeClass)
Public Sub Get(FileNr, VBTypeClass)
   SetCurFileHandler(FileNr)
   
End Sub
Public Sub Put(FileNr, VBTypeClass)
   SetCurFileHandler(FileNr)
   
End Sub
Public Function ReadLine(Handler As VBFileHandler) As String 
   If Handler = Nothing Then Exit Function
   ReadLine = Handler.readLine()
End Function

Public Sub Print(FileNr As Integer, Text As String)
   SetCurFileHandler(FileNr)
   'Call Write(myCurFHnd, sLine & vbCrLf)
   Call Put(myCurFHnd, Text & vbCrLf, myFilePos)
   myFilePos = myFilePos + Len(Text) + 2
End Sub

Public Sub Print(FileNr As Integer, Text As String, nx As Variant)
   SetCurFileHandler(FileNr)
   'Call Write(myCurFHnd, sLine & vbCrLf)
   Call Put(myCurFHnd, Text, myFilePos)
   myFilePos = myFilePos + Len(Text)
End Sub

Public Sub Line_Input(FileNr As Integer, sBuff As java#lang#StringBuffer)
   'OlimilO 12.Oct.2009: VB-compatibility
   SetCurFileHandler(FileNr)
   sBuff.setLength(0)
   sBuff.append(myCurFHnd.readLine)
End Sub

Public Function Close(Handler As VBFileHandler) As Boolean 
   If Handler = Nothing Then Exit Function
   Handler.close
   myFilePos = 1
End Function

Public Sub Close(FileNr As Integer)
   SetCurFileHandler(FileNr)
   Close(myCurFHnd)
   myCurFHnd = Nothing
   myFHList(myCurIndex) = Nothing
End Sub

'Public Function EOF(Handler As VBFileHandler) As Boolean 
'   If Handler = Nothing Then Exit Function
'End Function

Public Function FileExists(Path As String ) As Boolean 
   Dim tmpHandler As New VBFileHandler 
   tmpHandler.Filename = Path
   FileExists = tmpHandler.exists
End Function

Public Function Kill(Path As String ) As Boolean 
   Dim tmpHandler As New VBFileHandler 
   tmpHandler.Filename = Path
   Kill = tmpHandler.delete
End Function

Public Function FileLen(Path As String ) As Long 
   Dim tmpHandler As New VBFileHandler 
   tmpHandler.Filename = Path
   FileLen = tmpHandler.length
End Function

Public Function FileCopy(Source As String, Destination As String) As Boolean
'
'http://www.java2s.com/Code/Java/File-Input-Output/CopyfilesusingJavaIOAPI.htm
'OlimilO: 
'VBFile-Class?
'

   Dim fromFile As New java#io#File(Source)
   Dim toFile   As New java#io#File(Destination)
   
   If (Not fromFile.exists) Then
      MsgBox("Source file does not exist: " & vbNewLine & Chr(34) & Source & Chr(34), vbExclamation Or vbOKOnly, "FileCopy")
      Exit Function
   End If
   If (Not fromFile.isFile) Then
      MsgBox("Can not copy directory: " & vbNewLine & Chr(34) & Source & Chr(34), vbExclamation Or vbOKOnly, "FileCopy")
      Exit Function
   End If
   If (Not fromFile.canRead) Then
      MsgBox("Source file is unreadable: " & vbNewLine & Chr(34) & Source & Chr(34), vbExclamation Or vbOKOnly, "FileCopy")
      Exit Function
   End If
   If (toFile.isDirectory) Then
      toFile = New File(toFile, fromFile.getName)
   End If
   
   If (toFile.exists) Then
      If (Not toFile.canWrite()) Then
         MsgBox("Destination file is unwriteable: " & vbNewLine & Chr(34) & Destination & Chr(34), vbExclamation Or vbOKOnly, "FileCopy")
         Exit Function
      End If
      If MsgBox("File already exists. Overwrite?" & vbNewLine & Chr(34) & toFile.getName & Chr(34), vbQuestion Or vbOKCancel, "FileCopy") <> vbOK Then
         MsgBox("Existing file was not overwritten!", vbExclamation Or vbOKOnly, "FileCopy")
         Exit Function
      End If
   Else
      Dim Parent As java#lang#String = toFile.getParent
      If (Parent = Nothing) Then
         Parent = System.getProperty("user.dir")
      End If
      Dim dir As New File(Parent)
      If (Not dir.exists) Then
         'If MsgBox("FileCopy: " & "destination directory does not exist create it?: " & Parent) = vbOK Then
            dir.mkdirs
         'Else
         '   Exit Function
         'End If
      End If
      If (dir.isFile) Then
         MsgBox("Destination is not a directory: " & vbNewLine & Chr(34) & Parent & Chr(34), vbExclamation Or vbOKOnly, "FileCopy")
         Exit Function
      End If
      If (Not dir.canWrite) Then
         MsgBox("Destination directory is unwriteable: " & vbNewLine & Chr(34) & Parent & Chr(34), vbExclamation Or vbOKOnly, "FileCopy")
         Exit Function
      End If
   End If
   
   Dim fisFrom As New java#io#FileInputStream(fromFile)
   Dim fosTo   As New java#io#FileOutputStream(toFile)
   Dim buffer() As Byte
   Redim buffer(4096)
   Dim bytesRead As Integer
   
   bytesRead = fisFrom.read(buffer)
   While (bytesRead <> -1)
      fosTo.write(buffer, 0, bytesRead)
      bytesRead = fisFrom.read(buffer)
   Wend
End Function

Public Function DirCopy(Source As String, Destination As String) As Boolean
  
  Dim tmpString As String = Source & System.getProperty("file.separator")
  
  If Len(Destination) > Len(tmpString) Then
    If ((Left(Destination, Len(tmpString)).equals(tmpString))) Then
      MsgBox("This is not allowed. It ends with recursive, endless copying!" & vbNewLine & _
             "Destination directory:" & vbNewLine & Chr(34) & Destination & Chr(34) & vbNewLine & _
             "is a subdirectory of source:" & vbNewLine & Chr(34) & Source & Chr(34), vbExclamation Or vbOKOnly, "DirCopy")
    End If
  End If

  Dim SourceFile As java#io#File = New File(Source)
  Dim DestinationFile As java#io#File = New File(Destination)
  DirCopy = True
  If (NOT SourceFile.exists) Then
    MsgBox ("Source directory does not exist:" & vbNewLine & Chr(34) & Source & Chr(34), vbExclamation Or vbOKOnly, "DirCopy")
    DirCopy = False
    Exit Function
  Elseif (NOT SourceFile.isDirectory) Then
    MsgBox ("Source directory is not a directory:" & vbNewLine & Chr(34) & Source & Chr(34), vbExclamation Or vbOKOnly, "DirCopy")
    DirCopy = False
    Exit Function
  Else
    If (NOT DestinationFile.exists) Then
      MkDir Destination
    End If
    If (NOT DestinationFile.isDirectory) Then
      MsgBox ("Destination directory is not a directory:" & vbNewLine & Chr(34) & Destination & Chr(34), vbExclamation Or vbOKOnly, "DirCopy")
      DirCopy = False
      Exit Function
    End If
  End If
  
  Dim childFolders() As File
  childFolders() = SourceFile.listFiles()

  Dim item As File
  For Each item In childFolders
    If item.isFile Then
      FileCopy (Source & System.getProperty("file.separator") & item.getName , Destination & System.getProperty("file.separator") & item.getName)
    ElseIf item.isDirectory Then
      DirCopy (Source & System.getProperty("file.separator") & item.getName , Destination & System.getProperty("file.separator") & item.getName)    
    End If
  Next
End Function

Public Function FileDateTime(path As String) As Date
  Dim file As New java#io#File(path)
  Dim modifiedTime As Long = file.lastModified()
  Dim myDate As Date = New Date(modifiedTime)
  FileDateTime = myDate  
End Function

Public Function CurDir() As String
   Dim tmpString As String
   tmpString = System.getProperties().getProperty("user.dir")

   If Right$(tmpString, 1) = System.getProperty("file.separator") Then
     tmpString = Left$(tmpString, Len(tmpString)-1)
   End If
   
   If InStr(tmpString, System.getProperty("file.separator")) = 0 Then
     tmpString = tmpString + System.getProperty("file.separator")
   End If

   CurDir = tmpString
End Function

Public Function TmpDir() As String
   Dim tmpString As String
   tmpString = System.getProperties().getProperty("java.io.tmpdir")

   If Right$(tmpString, 1) = System.getProperty("file.separator") Then
     tmpString = Left$(tmpString, Len(tmpString)-1)
   End If
   
   If InStr(tmpString, System.getProperty("file.separator")) = 0 Then
     tmpString = tmpString + System.getProperty("file.separator")
   End If

   TmpDir = tmpString
End Function

Public Function TempDir() As String
   TempDir = TmpDir
End Function

Public Function HomeDir() As String
   Dim tmpString As String
   tmpString = System.getProperties().getProperty("user.home")

   If Right$(tmpString, 1) = System.getProperty("file.separator") Then
     tmpString = Left$(tmpString, Len(tmpString)-1)
   End If
   
   If InStr(tmpString, System.getProperty("file.separator")) = 0 Then
     tmpString = tmpString + System.getProperty("file.separator")
   End If

   HomeDir = tmpString
End Function

Public Function JavaDir() As String
   Dim tmpString As String
   tmpString = System.getProperties().getProperty("java.home")

   If Right$(tmpString, 1) = System.getProperty("file.separator") Then
     tmpString = Left$(tmpString, Len(tmpString)-1)
   End If
   
   If InStr(tmpString, System.getProperty("file.separator")) = 0 Then
     tmpString = tmpString + System.getProperty("file.separator")
   End If

   JavaDir = tmpString
End Function

Public Sub MkDir(aPath As String)
   Dim mydir As New java#io#File(aPath)
   mydir.mkdirs
End Sub

Public Sub RmDir(aPath As String)
   Dim mydir As New java#io#File(aPath)
   If mydir.isDirectory Then
      mydir.delete
   End If
End Sub

Public Function DirExists(Path As String) As Boolean
   Dim mydir As New java#io#File(Path)
   DirExists = mydir.isDirectory
End Function

Public Function Dir(PathName As String, Optional Attributes As VbFileAttribute = VbFileAttribute.vbNormal) As String
   Dim mydir As New java#io#File(PathName)
   If ((Attributes And vbDirectory) = vbDirectory) And mydir.isDirectory Then
      Dir = mydir.getParent
      If (Attributes And vbHidden) = vbHidden Then
         If Not mydir.isHidden Then Dir = ""
      End If
   ElseIf (Attributes = VbFileAttribute.vbNormal) And mydir.isFile Then
      Dir = mydir.getCanonicalFile
      If (Attributes And vbHidden) = vbHidden Then
         If Not mydir.isHidden Then Dir = ""
      End If
   End If
End Function

Public Function GetAttr(PathName As String) As VbFileAttribute
   Dim mydir As New java#io#File(PathName)
   GetAttr = VbFileAttribute.vbNormal
   If mydir.isDirectory Then GetAttr = GetAttr Or vbDirectory
   If mydir.isHidden    Then GetAttr = GetAttr Or vbHidden
   If mydir.canRead And (Not mydir.canWrite) Then GetAttr = GetAttr Or vbReadOnly
   'If Not mydir.canExecute Then
   'GetAttr = GetAttr Or vbArchive
   'End If
   'not necessarily
End Function

Public Sub SetAttr(PathName As String, Attributes As VbFileAttribute)
   Dim mydir As New java#io#File(PathName)
   If Attributes = VbFileAttribute.vbNormal Then
      'reset all to normal
      'hidden = false
      'system = false
      'archive = false      
      'readonly = false
      mydir.setWritable True
   Else
      If (Attributes And vbReadOnly) = vbReadOnly Then
         mydir.setReadOnly
      End If
   End If
End Sub

]]></Source><Param Name="(Name)" Value="FileSystem"/><Param Name="(SuperClass)" Value="java/lang/Object"/><Param Name="(Type)" Value="Module"/><Param Name="(Access)" Value="Public"/><Param Name="(NameSpace)" Value="VB"/></SourceFile>
