<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit

Implements VB#IJabacoClass 
Implements VB#IMenuItem 

Dim myIconPath As #IResource
Dim myControlID As String
Dim myMenuBar As VBMenuBar

Public Property Get MenuBar() As VBMenuBar 
   MenuBar = myMenuBar
End Property

Public Sub VBMenuGroup(refMenuBar As VBMenuBar, refOwner As #JComponent, refControlID As String, refCaption As String, refEnabled As Boolean, refVisible As Boolean, refIconPath As #IResource)
   myMenuBar = refMenuBar
   If refOwner = Null Then
      refMenuBar.add Me
      Call Parent.setOpaque(False)
   Else
      refOwner.add Me
      Call Parent.setOpaque(True)
   End If
   
   Call Parent.addActionListener(refMenuBar)
   Caption = refCaption
   ControlID = refControlID
   Enabled = refEnabled
   Visible = refVisible
   Icon = refIconPath
   
   'If refOwner <> Nothing Then 
   '   'Parent.setIconTextGap 8
   '   If Parent.getIcon() = Nothing Then
   '      Parent.setIcon CreateIcon(16, 16) ' ugly swing - will work in most cases
   '   End If                               ' 24.07.2014: Look in VBMenuItem for reason, why this is
   'End If                                  '      outcommented
   
End Sub

Public Function getBackground() As #Color
   If myMenuBar = Nothing Then
      getBackground = Base.getBackground()
   Else
      getBackground = myMenuBar.getBackground()
   End If
End Function

Public Function getForeground() As #Color
   If myMenuBar = Nothing Then
      getForeground = Base.getForeground()
   Else
      getForeground = myMenuBar.getForeground()
   End If
End Function

Public Function getFont() As #Font 
   If myMenuBar = Nothing Then
      getFont = Base.getFont()
   Else
      getFont = myMenuBar.getFont()
   End If
End Function

Public Function GetAsPopupMenu() As #JPopupMenu 
   GetAsPopupMenu = GetAsPopupMenu(Nothing)
End Function

Public Function GetAsPopupMenu(tmpMenu As #JComponent) As #JPopupMenu 
   On Error Resume Next
   Dim tmpMenuItem As VBMenuItem, tmpMenuGroup As VBMenuGroup
   Dim tmpNewMenuItem As VBMenuItem, tmpNewMenuGroup As VBMenuGroup
   If tmpMenu = Nothing Then 
      Dim tmpNewPopupMenu As New #JPopupMenu 
     ' tmpNewPopupMenu.setComponentPopupMenu 
      tmpMenu = tmpNewPopupMenu
   End If

   Dim i As Integer
   For i = 0 To Parent.getMenuComponentCount() - 1
   
       tmpMenuItem = Nothing 
       tmpMenuItem = Cast(Parent.getMenuComponent(i), VBMenuItem)
       If tmpMenuItem <> Nothing Then
          tmpNewMenuItem = New VBMenuItem(myMenuBar, tmpMenu, tmpMenuItem.ControlID, tmpMenuItem.Caption, True, tmpMenuItem.Visible, tmpMenuItem.Icon)
       End If
   
       tmpMenuGroup = Nothing 
       tmpMenuGroup = Cast(Parent.getMenuComponent(i), VBMenuGroup)
       If tmpMenuGroup <> Nothing Then
          tmpNewMenuGroup = New VBMenuGroup(myMenuBar, tmpMenu, tmpMenuGroup.ControlID, tmpMenuGroup.Caption, True, tmpMenuGroup.Visible, tmpMenuGroup.Icon)
          Call tmpMenuGroup.GetAsPopupMenu(tmpNewMenuGroup)
       End If
       
   Next
   
   GetAsPopupMenu = Cast(tmpMenu, JPopupMenu)
End Function

Public Property Get ControlID() As String
    ControlID = myControlID
End Property

Public Property Let ControlID(s As String)
    myControlID = s
End Property

Public Property Get Caption() As String
    Caption = Me.getLabel()
End Property

Public Property Let Caption(s As java#lang#String)
   Dim mnemonicPos As Integer
   mnemonicPos = s.indexOf("&")
   If ((mnemonicPos > -1) And (mnemonicPos < s.length())) Then 
      Me.setMnemonic(s.charAt(mnemonicPos+1))      
   End If
   Me.setLabel(s.replaceFirst("&", ""))
End Property

Public Property Get Enabled() As Boolean 
   Enabled = Me.isEnabled()
End Property

Public Property Let Enabled(v As Boolean)
   Me.setEnabled v
End Property

Public Property Get Visible() As Boolean 
   Visible = Me.isVisible()
End Property

Public Property Let Visible(v As Boolean)
   Me.setVisible v
End Property

Public Property Get Icon() As #IResource
   Icon = myIconPath
End Property

Public Property Let Icon(Path As #IResource)
   On Error Goto ERROUT
   If Path <> Nothing Then
      If Len(Path) > 0 Then 
         Base.setIcon LoadIcon(Path)
         myIconPath = Path
      End If
   End If
ERROUT:
End Property

Public Property Get Parent() As JMenu
   Parent = Base
End Property
]]></Source><Param Name="(Name)" Value="VBMenuGroup"/><Param Name="(SuperClass)" Value="javax/swing/JMenu"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/><Param Name="(NameSpace)" Value="VB"/></SourceFile>
