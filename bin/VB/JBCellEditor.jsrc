<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit

Implements TableCellEditor

Private Enum CELLEDITTYPE
   CELLEDIT_TEXT
   CELLEDIT_COMBO
   CELLEDIT_CUSTOM
   CELLEDIT_BUTTON
   CELLEDIT_CHECK
   CELLEDIT_SPINNER
End Enum

Public Enum JBCellEditorComponent
   JBTextBox
   JBCommandButton
   JBComboBox
   JBCheckBox
   JBSpinner
End Enum

Dim Withevents myText As TextBox
Dim Withevents myCombo As ComboBox
Dim Withevents myButton As CommandButton
Dim Withevents myCheck As CheckBox
Dim Withevents mySpinner As Spinner

Dim myLabel As New Label
Dim ButtonFrame As New JPanel(New BorderLayout())

Dim myEditMode As CELLEDITTYPE = CELLEDIT_TEXT
Dim myCellEditorComponent As JBCellEditorComponent
Dim myGrid As JBGrid
Dim lastObject As Object


' ******************************** INIT THIS EDITOR ********************************

Public Sub JBCellEditor(refGrid As JBGrid)
   myGrid = refGrid
   myText.VScrollBar = sbShowNever 
   myText.HScrollBar = sbShowNever 
   myCheck.Parent.setHorizontalAlignment(0)
   
   Call myText.setBorder(New EmptyBorder(New Insets(0,0,0,0)))
   Call myCombo.setBorder(New EmptyBorder(New Insets(0,0,0,0)))
   Call myCombo.Parent.setFocusable(False)

   Call myLabel.Parent.setLabelFor(myButton)
   myLabel.Visible = True
   myButton.Visible = True
   myButton.CanGetFocus = False

   Call myButton.Parent.setPreferredSize(New Dimension(23, 23))
   Call ButtonFrame.add(myButton, BorderLayout.LINE_END)
   Call ButtonFrame.add(myLabel, BorderLayout.LINE_START)
   Call ButtonFrame.setVisible(True)
End Sub

' ******************************** KEY - EVENTS ********************************

Public Sub myText_KeyDown(KeyCode As Integer, Shift As Integer)
   If KeyCode = 13 Then
      Call Base.stopCellEditing() 
   End If
End Sub

Public Sub mySpinner_KeyDown(KeyCode As Integer, Shift As Integer)
   If KeyCode = 13 Then
      Call Base.stopCellEditing() 
   End If
End Sub

' ******************************** MOUSE - EVENTS ********************************

Public Sub myButton_Click()
   Call myGrid.fireCellButtonClick()
End Sub

Public Sub myCombo_Click()
   Call Base.stopCellEditing()
End Sub

Public Sub myCheck_Click()
   Call Base.stopCellEditing()
End Sub

' ******************************** SPECIAL FUNCTIONS ********************************

Public Property Get Component() As JBCellEditorComponent
   Component = myCellEditorComponent
End Property

Public Property Let Component(v As JBCellEditorComponent)
   myCellEditorComponent = v
End Property

Public Property Get JBTextBox() As TextBox 
   JBTextBox = myText
End Property

Public Property Get JBCommandButton() As CommandButton 
   JBCommandButton = myButton
End Property

Public Property Get JBComboBox() As ComboBox 
   JBComboBox = myCombo
End Property
'
Public Property Get JBSpinner() As Spinner 
   JBSpinner = mySpinner
End Property

Public Property Get Value() As String
   Select Case myEditMode
      Case CELLEDIT_TEXT:    Value = myText.Text
      Case CELLEDIT_COMBO:   Value = myCombo.Text
      Case CELLEDIT_BUTTON:  Value = myLabel.Caption
      Case CELLEDIT_CHECK:   Value = myCheck.Value
      Case CELLEDIT_SPINNER: Value = mySpinner.EditorText
   End Select
End Property

Public Property Let Value(v As String)
   Select Case myEditMode
      Case CELLEDIT_TEXT:    myText.Text = v
      Case CELLEDIT_COMBO:   myCombo.Text = v
      Case CELLEDIT_BUTTON:  myLabel.Caption = v
      Case CELLEDIT_CHECK:   myCheck.Value = GetStringAsBoolean(v)
      Case CELLEDIT_SPINNER: mySpinner.Value = v
   End Select
End Property

Public Function isCellEditable(e As EventObject) As Boolean 
   If myGrid.Editable = jbNotEditable Then Exit Function
   If IsClass(e, MouseEvent) Then
      Dim tmpMouseEvent As MouseEvent = Cast(e, MouseEvent)
      If tmpMouseEvent.getClickCount Mod 2 = 0 Then
         isCellEditable = (myGrid.Editable = jbEditOnDblClick)
      Else
         isCellEditable = (myGrid.Editable = jbEditOnClick)
      End If
   End If
End Function

Public Function getCellEditorValue() As Object 
   Select Case myEditMode
      Case CELLEDIT_TEXT
         If lastData <> Nothing Then
            lastData.Text = myText.Text
         End If
      Case CELLEDIT_COMBO
         If lastData <> Nothing Then
            lastData.Text = myCombo.Text
         End If
      Case CELLEDIT_CHECK
         If lastData <> Nothing Then
            lastData.Text = myCheck.Value
         End If   
      Case CELLEDIT_SPINNER
         If lastData <> Nothing Then
            lastData.Text = mySpinner.EditorText
         End If    
   End Select
   Call myGrid.fireAfterEdit(myGrid.Row, myGrid.Col)
   getCellEditorValue = lastObject
End Function

Public Property Get lastData() As JBCellData 
   On Error Resume Next
   lastData = Cast(lastObject, #JBCellData)
End Property

Public Function getRowBackColor(row As Integer) As Long
   getRowBackColor = IIF(row Mod 2 = 1, myGrid.BackColorCellsAlternating, myGrid.BackColorCells)
End Function

Public Function getTableCellEditorComponent(table As JTable, value As Object, isSelected As Boolean, row As Integer, col As Integer) As Component
   Dim ret As #Component
   lastObject = value
   If lastData <> Nothing Then
      ret = lastData.getEditorComponent(myGrid, isSelected, True)
      myEditMode = CELLEDIT_CUSTOM
      If ret = Nothing Then
         Dim myBackColor As Long = getRowBackColor(row)
         Select Case myCellEditorComponent
            Case 0
'               myText.BackColor = myBackColor
'               myText.ForeColor = lastData.ForeColor
               myText.Text = lastData.Text
               Call myText.Parent.setFont(myGrid.Parent.getFont())
               Call myText.SetFocus()            
               ret = myText
               myEditMode = CELLEDIT_TEXT
            Case 1
               If myGrid.DataMatrix(row, col).CellBackColor <> -1 Then 
                  Call ButtonFrame.setBackground(RGBtoColor(myGrid.DataMatrix(row, col).CellBackColor))
                  Call ButtonFrame.getComponent(0).setBackground(RGBtoColor(myGrid.DataMatrix(row, col).CellBackColor))
               Else
                  Call ButtonFrame.setBackground(RGBtoColor(myBackColor))
                  Call ButtonFrame.getComponent(0).setBackground(RGBtoColor(myBackColor))
               End If             
               myLabel.ForeColor = lastData.ForeColor
               myLabel.Caption = lastData.Text
               Call myLabel.Parent.setFont(myGrid.Parent.getFont())
               ret = ButtonFrame
               myEditMode = CELLEDIT_BUTTON            
            Case 2
               If myCombo.ListIndex > -1 Then 
'                  myCombo.BackColor = myBackColor
'                  myCombo.BackColorAlternating = myBackColor
'                  myCombo.ForeColor = myGrid.ForeColor
                  myCombo.ForeColorSel = myGrid.ForeColorSel
                  myCombo.BackColorSel = myGrid.BackColorSel
                  myCombo.BorderColorSel = myGrid.BackColorSel
                  myCombo.Text = lastData.Text
                  Call myCombo.Parent.setFont(myGrid.Parent.getFont())
                  Call myCombo.SetFocus()
                  ret = myCombo
                  myEditMode = CELLEDIT_COMBO
               End If
            Case 3
               If IsStringBoolean(lastData.Text) = True Then
                  myCheck.BackColor = IIF(myGrid.DataMatrix(row, col).CellBackColor = -1, myGrid.BackColorSel, myGrid.DataMatrix(row, col).CellBackColor)
                  myCheck.Value = GetStringAsBoolean(lastData.Text)
                  ret = myCheck
                  myEditMode = CELLEDIT_CHECK
               End If            
            Case 4
'               mySpinner.BackColor = myBackColor
'               mySpinner.ForeColor = lastData.ForeColor
               mySpinner.EditorText = lastData.Text
               Call mySpinner.Parent.setFont(myGrid.Parent.getFont())
               ret = New mySpinner
               myEditMode = CELLEDIT_SPINNER
         End Select
      End If
   Else
      ret = Nothing
   End If 
   getTableCellEditorComponent = ret
End Function
]]></Source><Param Name="(Name)" Value="JBCellEditor"/><Param Name="(SuperClass)" Value="javax/swing/AbstractCellEditor"/><Param Name="(NameSpace)" Value="VB"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/></SourceFile>
