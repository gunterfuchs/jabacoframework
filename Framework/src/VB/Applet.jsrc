<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit
Implements ILoadAdapter
Implements IJabacoForm
Implements ComponentListener 
Implements IJabacoContainer

Dim Withevents myMenuBar As New VBMenuBar(Me)
Dim Withevents myToolBar As New VBToolBar(Me)
Dim Withevents myContent As New PictureBox 

Dim myInitLookAndFeelFlag As Boolean = LookAndFeelManager().isInitialized()
Dim StartVisibility As Boolean
Dim FormLoaded As Boolean = False
Dim myMenuBarBackColor As Long
Dim myMenuBarForeColor As Long
Dim myToolBarBackColor As Long
Dim myToolBarForeColor As Long
Dim myTag As String

' ******************************** INIT THIS CONTROL ********************************
Public Sub init()
   Call Me.Applet_Init()
   Call Refresh()
   Call myContent.Parent.updateUI()
End Sub

Public Sub start()
   Call LookAndFeelManager().setDefaultLookAndFeel()
   Call javax#swing#SwingUtilities.updateComponentTreeUI(Me)
   Call Me.Applet_Start()
   
End Sub

Public Sub destroy()
   Call Me.Applet_Destroy()
End Sub

Public Property Get Parent() As JApplet
   Parent = Base
End Property

Public Sub Class_Initialize() 
   myContent.BorderStyle = fmBorderStyleNone 
   Call Base.getContentPane().add(myContent)
   myMenuBar.Visible = False 
   myToolBar.Visible = False
   Parent.setJMenuBar myMenuBar
   Parent.getContentPane().add myToolBar, BorderLayout.NORTH
   myContent.Visible = True 
End Sub

' ******************************** DEFAULT Component - EVENTS ********************************

Public Sub fireLoaded()
   Dim tmpFireAdapter As New LoadAdapter(Me, Me)
   tmpFireAdapter.fireLoaded()
End Sub

Public Sub fireLoaded(sender As Object)
   Call Me.Applet_Initialize()
   FormLoaded = True
   Visible = StartVisibility
   Call Me.addComponentListener(Me)
End Sub

Public Sub add(Component As java#awt#Component) 
   Call myContent.Add(Component)
End Sub

Public Sub componentHidden(e As ComponentEvent)
   Me.Applet_Deactivate()
End Sub

Public Sub componentMoved(e As ComponentEvent)
   Me.Applet_Move()
End Sub

Public Sub componentResized(e As ComponentEvent)
   Me.Applet_Resize()
End Sub

Public Sub componentShown(e As ComponentEvent)
   Me.Applet_Activate()
End Sub

Public Sub PSet(x As Single, y As Single)
   myContent.PSet x, y
End Sub

Public Sub Line(x As Single, y As Single)
   myContent.Line x, y
End Sub

Public Sub Line(x1 As Single, y1 As Single, x2 As Single, y2 As Single)
   myContent.Line x1, y1, x2, y2
End Sub

Public Sub Line(x1 As Single, y1 As Single, x2 As Single, y2 As Single, Rect As Boolean)
   myContent.Line x1, y1, x2, y2, Rect
End Sub

Public Sub Line(x1 As Single, y1 As Single, x2 As Single, y2 As Single, Rect As Boolean, FillColor As Long)
   myContent.Line x1, y1, x2, y2, Rect, FillColor
End Sub

Public Sub Circle(x As Single, y As Single, radius As Single)
   Call myContent.Circle(x, y, radius)
End Sub

Public Sub Circle(x As Single, y As Single, radius As Single, color As Long)
   Call myContent.Circle(x, y, radius, color)
End Sub

Public Sub Circle(x As Single, y As Single, radius As Single, color As Long, startAngle As Single, endAngle As Single, Optional aspect As Single=1, Optional FillColor As Long=-1)
   Call myContent.Circle(x, y, radius, color, startAngle, endAngle, aspect, FillColor)
End Sub

Public Sub PaintPicture(refImage As Image, x As Single, y As Single)
   myContent.PaintPicture refImage, x, y
End Sub

Public Sub Print(text As String, x1 As Single, y1 As Single)
   myContent.Print text, x1, y1
End Sub

Public Sub Cls() 
   myContent.Cls
End Sub

Public Function TextWidth(text As String) As Integer
   TextWidth = myContent.TextWidth(text)
End Function

Public Function TextHeight(text As String) As Integer
   TextHeight = myContent.TextHeight(text)
End Function

Public Sub Print(text As String)
   Call myContent.Print(text)   
End Sub

Public Property Get CurrentX() As Long
   CurrentX = myContent.CurrentX
End Property

Public Property Let CurrentX(v As Long)
   myContent.CurrentX = v
End Property

Public Property Get CurrentY() As Long
   CurrentY = myContent.CurrentY
End Property

Public Property Let CurrentY(v As Long)
   myContent.CurrentY = v
End Property

Public Property Get Picture() As #IResource
    Picture = myContent.Picture
End Property

Public Property Let Picture(Path As #IResource)
   myContent.Picture = Path
End Property

Public Property Get DrawWidth() As Integer 
   Transparency = myContent.DrawWidth
End Property

Public Property Let DrawWidth(v As Integer)
   myContent.DrawWidth = v
End Property

Public Property Get Transparency() As Integer 
   Transparency = myContent.Transparency
End Property

Public Property Let Transparency(v As Integer)
   myContent.Transparency = v
End Property

Public Property Get AntiAliasing() As Boolean
   AntiAliasing = myContent.AntiAliasing
End Property

Public Property Let AntiAliasing(v As Boolean)
   myContent.AntiAliasing = v
End Property

Public Property Get AutoRedraw() As Boolean
   AutoRedraw = myContent.AutoRedraw
End Property

Public Property Let AutoRedraw(v As Boolean)
   myContent.AutoRedraw = v
End Property

Public Property Get FontName() As String 
   FontName = myContent.FontName 
End Property

Public Property Let FontName(val As String)
   myContent.FontName  = val
End Property

Public Property Get FontBold() As Boolean 
   FontBold = myContent.FontBold 
End Property

Public Property Let FontBold(val As Boolean)
   myContent.FontName  = val
End Property

Public Property Get FontItalic() As Boolean
   FontItalic = myContent.FontItalic
End Property

Public Property Let FontItalic(val As Boolean)
   myContent.FontItalic = val
End Property

Public Property Get FontSize() As Integer 
   FontSize = myContent.FontSize
End Property

Public Property Let FontSize(val As Integer)
   myContent.FontSize = val
End Property

Public Property Get Font() As Font
   Font = myContent.getFont()
End Property

Public Property Get Visible() As Boolean 
    Visible = Me.isVisible()
End Property

Public Property Let Visible(v As Boolean)
   If Formloaded Then 
      Me.setVisible v
   Else
      StartVisibility = v
   End If
End Property

Public Property Get MenuBar() As VBMenuBar 
   MenuBar = myMenuBar
End Property

Public Property Get ToolBar() As VBToolBar 
   ToolBar = myToolBar
End Property

Public Sub Applet_Activate()
End Sub
Public Sub Applet_Deactivate()
End Sub
Public Sub Applet_Click()
End Sub
Public Sub Applet_DblClick()
End Sub
Public Sub Applet_GotFocus()
End Sub
Public Sub Applet_KeyDown(KeyCode As Integer, Shift As Integer)
End Sub
Public Sub Applet_KeyPress(KeyAscii As Integer)
End Sub
Public Sub Applet_KeyUp(KeyCode As Integer, Shift As Integer)
End Sub
Public Sub Applet_Initialize()
End Sub
Public Sub Applet_LostFocus()
End Sub
Public Sub Applet_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Applet_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Applet_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Applet_MouseEntered()
End Sub
Public Sub Applet_MouseExited()
End Sub
Public Sub Applet_Paint()
End Sub
Public Sub Applet_Resize()
End Sub
Public Sub Applet_Move()
End Sub
Public Sub Applet_Unload(Cancel As Integer)
End Sub
Public Sub Applet_MenuClick(MenuItem As IMenuItem)
End Sub
Public Sub Applet_ToolBarClick(ToolBarItem As IToolBarItem)
End Sub
Public Sub Applet_Start()
End Sub
'Public Sub Applet_Stop()
'End Sub
Public Sub Applet_Init()
End Sub
Public Sub Applet_Destroy()
End Sub

Public Sub myContent_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Call Me.Applet_MouseUp(Button, Shift, X, Y)
End Sub
Public Sub myContent_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Call Me.Applet_MouseMove(Button, Shift, X, Y)
End Sub
Public Sub myContent_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Call Me.Applet_MouseDown(Button, Shift, X, Y)
End Sub
Public Sub myContent_Click()
   Call Me.Applet_Click()
End Sub
Public Sub myContent_DblClick()
   Call Me.Applet_DblClick()
End Sub
Public Sub myContent_KeyDown(KeyCode As Integer, Shift As Integer)
   Call Me.Applet_KeyDown(KeyCode, Shift)
End Sub
Public Sub myContent_KeyPress(KeyAscii As Integer)
   Call Me.Applet_KeyPress(KeyAscii)
End Sub
Public Sub myContent_KeyUp(KeyCode As Integer, Shift As Integer)
   Call Me.Applet_KeyUp(KeyCode, Shift)
End Sub
Public Sub myContent_Paint()
   Call Me.Applet_Paint()
End Sub

Public Property Get ContentFrame() As PictureBox 
   ContentFrame = myContent
End Property

Public Property Get Left() As Single
    Left = Me.getLocation.x
End Property

Public Property Let Left(v As Single)
    Me.setLocation(v, Me.getLocation.y)
End Property

Public Property Get Top() As Single
    Top = Me.getLocation.y
End Property

Public Property Let Top(v As Single)
    Me.setLocation(Me.getLocation.x, v)
End Property

Public Property Get Width() As Single
   Width = Me.getSize.Width
End Property

Public Property Let Width(v As Single)
   Me.setSize(v, Me.getSize.Height)
End Property

Public Property Get Height() As Single
   Height = Me.getSize.Height
End Property

Public Property Let Height(v As Single)
   Me.setSize(Me.getSize.Width, v)
End Property

Public Function Move(Left As Single, Optional Top As Single = -1, Optional Width As Single = -1, Optional Height As Single = -1)
   Me.Left = Left
   If Top <> -1 Then Me.Top = Top
   If Width <> -1 Then Me.Width = Width
   If Height <> -1 Then Me.Height = Height
End Function

Public Property Get BackColor() As Long
   BackColor = myContent.BackColor
End Property

Public Property Let BackColor(v As Long)
   myContent.BackColor = v
End Property

Public Property Get ForeColor() As Long
   ForeColor = myContent.ForeColor
End Property

Public Property Let ForeColor(v As Long)
   myContent.ForeColor = v
End Property

Public Function getBackground() As Color
   getBackground = RGBtoColor(MyContent.BackColor)
End Function

Public Function getForeground() As Color
   getForeground = RGBtoColor(MyContent.ForeColor)
End Function

Public Property Get Tag() As String 
   Tag = myTag
End Property

Public Property Let Tag(v As String)
   myTag = v
End Property

Public Sub myMenuBar_Click(MenuItem As IMenuItem)
   Call Me.Applet_MenuClick(MenuItem)
End Sub

Public Sub myMenuBar_Visible(b As Boolean)
   If b Then Me.Height = Me.Height + myMenuBar.Height 
End Sub

Public Sub myToolBar_Visible(b As Boolean)
   If b Then Me.Height = Me.Height + myToolBar.Height 
End Sub

Public Sub myToolBar_Click(ToolBarItem As IToolBarItem)
   Call Me.Applet_ToolBarClick(ToolBarItem)
End Sub

Public Property Get MenuBackColor() As Long
   MenuBackColor = myMenuBarBackColor
End Property

Public Property Let MenuBackColor(v As Long)
   myMenuBarBackColor = v
   myToolBar.Parent.repaint 
End Property

Public Property Get MenuForeColor() As Long
   MenuForeColor = myMenuBarForeColor
End Property

Public Property Let MenuForeColor(v As Long)
   myMenuBarForeColor = v
   myToolBar.Parent.repaint 
End Property

Public Property Get ToolBackColor() As Long
   ToolBackColor = myToolBarBackColor
End Property

Public Property Let ToolBackColor(v As Long)
   myToolBarBackColor = v
   myToolBar.Parent.repaint 
End Property

Public Property Get ToolForeColor() As Long
   ToolForeColor = myToolBarForeColor
End Property

Public Property Let ToolForeColor(v As Long)
   myToolBarForeColor = v
   myToolBar.Parent.repaint 
End Property

Public Sub Refresh()
   Call Parent.invalidate()
   Call Parent.repaint(0, 0, 0, Me.Width, Me.Height)
   Call myContent.Refresh()
   
End Sub


]]></Source><Param Name="(Name)" Value="Applet"/><Param Name="(SuperClass)" Value="javax/swing/JApplet"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/><Param Name="(NameSpace)" Value="VB"/></SourceFile>
