<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit

Implements IJabacoControl
Implements MouseMotionListener
Implements FocusListener 
Implements ChangeListener
Implements KeyListener

Event Change()
Event Click()
Event GotFocus()
Event KeyDown(KeyCode As Integer, Shift As Integer)		
Event KeyPress(KeyAscii As Integer)		
Event KeyUp(KeyCode As Integer, Shift As Integer)
Event LostFocus()
Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
 
Dim myTag As String
Dim myMouseIcon As #IResource

' *** Variables for Anchor and resizing ***
Private myAnchor As AnchorStyles = AnchorStyles.vbTopLeft
Private mySavedWidth As Single
Private mySavedHeight As Single
Private mySavedLeft As Single
Private mySavedTop As Single
Private hostSavedWidth As Single
Private hostSavedHeight As Single
Private isResizeTriggerInitialized As Boolean = False
Private isLeftInitialized As Boolean = False
Private isTopInitialized As Boolean = False



' ******************************** INIT THIS CONTROL ********************************

Public Property Get Parent() As #JSpinner 
   Parent = Base
End Property

Public Sub Class_Initialize()
   
   Call Parent.addChangeListener(Me)
   Call getParentEditor.addKeyListener(Me)
   Call Parent.addFocusListener(Me)
   Call Parent.addMouseMotionListener(Me)
   'Call Parent.setBorder(New EmptyBorder(New Insets(1,1,1,1)))   ' makes the Border different to all other controls
                                                                  ' in MetalLookAndFeel and other LAFs.
End Sub

' ******************************** DEFAULT FOCUS - EVENTS ********************************

Public Sub focusGained(arg2 As FocusEvent)
   Raiseevent GotFocus()
End Sub

Public Sub focusLost(arg2 As FocusEvent)
   Raiseevent LostFocus()
End Sub

' ******************************** DEFAULT MOUSE - EVENTS ********************************

Public Sub mouseMoved(e As MouseEvent) 
    RaiseEvent MouseMove(getVBMouseButton(e),getVBMouseShift(e),e.getX(),e.getY())
End Sub

Public Sub mouseDragged(e As MouseEvent) 
    RaiseEvent MouseMove(getVBMouseButton(e),getVBMouseShift(e),e.getX(),e.getY())
End Sub
			
' ******************************** DEFAULT KEY - EVENTS ********************************		
      
Public Sub keyReleased(e As KeyEvent)		
   RaiseEvent KeyUp(e.getKeyCode, KeyEventToShiftConstant(e))		
End Sub		
      
Public Sub keyTyped(e As KeyEvent)		
   RaiseEvent KeyPress(e.getKeyChar)		
End Sub		
      
Public Sub keyPressed(e As KeyEvent)		
    RaiseEvent KeyDown(e.getKeyCode, KeyEventToShiftConstant(e))		
End Sub

' ******************************** SPECIAL FUNCTIONS ********************************
' Set AFTER setting a custom model!!

Private Function getParentEditor() As #JTextField
   getParentEditor = Cast(Parent.getEditor.getComponent(0), #JTextField)
End Function

Public Property Let Model(v As SpinnerModel)
   Call Base.setModel(v)
   Call getParentEditor.addKeyListener(Me)
End Property

Public Property Get Model() As SpinnerModel
   Model = Parent.getModel()
End Property

Public Property Let Editor(v As JComponent)
   Call Base.setEditor(v)
   Call getParentEditor.addKeyListener(Me)
End Property

Public Property Get Editor() As JComponent
   Editor = Parent.getEditor()
End Property

Public Property Get BackColorSel() As Long
   BackColorSel = ColorToRGB(getParentEditor.getSelectionColor())
End Property

Public Property Let BackColorSel(v As Long)
   If v <> -1 Then ' the non-color -1
      Call getParentEditor.setSelectionColor(RGBtoColor(v))
   End If
End Property

Public Property Get ForeColorSel() As Long
   ForeColorSel = ColorToRGB(getParentEditor.getSelectedTextColor())
End Property

Public Property Let ForeColorSel(v As Long)
   If v <> -1 Then ' the non-color -1
      Call getParentEditor.setSelectedTextColor(RGBtoColor(v))
   End If
End Property

Public Property Get Locked() As Boolean
   Locked = Not getParentEditor.isEditable
End Property

Public Property Let Locked(v As Boolean)
   Call getParentEditor.setEditable(v = False)
End Property

Public Sub setSelColor(v As Long)
   If v <> -1 Then ' the non-color -1
      Parent.setForeground RGBtoColor(v)
   End If
End Sub

Public Property Get EditorText() As String
   EditorText = getParentEditor().getText()
End Property

Public Property Let EditorText(v As String)
   getParentEditor().setText(v)
End Property

Public Property Get Value() As String
   On Error Resume Next
   Value = Parent.getValue()
End Property

Public Property Let Value(v As String)
   On Error Resume Next
   Call Parent.setValue(Val(v))
   Parent.commitEdit()
End Property

Public Sub stateChanged(e As ChangeEvent)
   Raiseevent Click()
   Raiseevent Change()
End Sub

' ************************* NOT THE SAME AS THE OTHER JABACO CONTROLS *************************
' Set AFTER setting a custom model!!

Public Property Get FontName() As String 
   FontName = getParentEditor.getFont.GetFamily()
End Property

Public Property Let FontName(val As String)
   Call getParentEditor.setFont(New Font(val, IIF(FontBold, BOLD, 0) OR IIF(FontItalic, ITALIC, 0), VBFontSizeToJFontSize(FontSize)))
End Property

Public Property Get FontBold() As Boolean 
   FontBold = getParentEditor.getFont.isBold()
End Property

Public Property Let FontBold(val As Boolean)
   Call getParentEditor.setFont(New Font(FontName, IIF(val, BOLD, 0) OR IIF(FontItalic, ITALIC, 0), VBFontSizeToJFontSize(FontSize)))
End Property

Public Property Get FontItalic() As Boolean
   FontItalic = getParentEditor.getFont.isItalic()
End Property

Public Property Let FontItalic(val As Boolean)
   Call getParentEditor.setFont(New Font(FontName, IIF(FontBold, BOLD, 0) OR IIF(val, ITALIC, 0), VBFontSizeToJFontSize(FontSize)))
End Property

Public Property Get FontSize() As Integer 
   FontSize = (JFontSizeToVBFontSize(getParentEditor.getFont.getSize()))
End Property

Public Property Let FontSize(val As Integer)
   Call getParentEditor.setFont(New Font(FontName, IIF(FontBold, BOLD, 0) Or IIF(FontItalic, ITALIC, 0), VBFontSizeToJFontSize(val)))
End Property

Public Property Get Font() As Font
   Font = getParentEditor.getFont()
End Property

Public Property Get BackColor() As Long
   BackColor = ColortoRGB(getParentEditor.getBackground())
End Property

Public Property Let BackColor(v As Long)
   If v <> -1 Then ' the non-color -1
      Call getParentEditor.setBackground(RGBtoColor(v))
   End If
End Property

Public Property Get ForeColor() As Long
   ForeColor = ColortoRGB(getParentEditor.getForeground())
End Property

Public Property Let ForeColor(v As Long)
   If v <> -1 Then ' the non-color -1
      Call getParentEditor.setForeground(RGBtoColor(v))
   End If
End Property

' ******************************** SAME IN ALL JABACO CONTROLS ********************************

Public Property Get Width() As Single
    Width = Me.getSize.Width
End Property

Public Property Let Width(v As Single)
    Me.setSize(v, Me.getSize.Height)
    Call Refresh()
End Property

Public Property Get Height() As Single
    Height = Me.getSize.Height
End Property

Public Property Let Height(v As Single)
    Me.setSize(Me.getSize.Width, v)
    Call Refresh()
End Property

Public Property Get Left() As Single
    Left = Me.getLocation.x
End Property

Public Property Let Left(v As Single)
    If isLeftInitialized = False Then
       mySavedLeft = v
       isLeftInitialized = True
    End If
    Me.setLocation(v, Me.getLocation.y)
End Property

Public Property Get Top() As Single
    Top = Me.getLocation.y
End Property

Public Property Let Top(v As Single)
    If isTopInitialized = False Then
       mySavedTop = v
       isTopInitialized = True
    End If
    Me.setLocation(Me.getLocation.x, v)
End Property

Public Property Get Anchor() AS AnchorStyles
   Anchor = myAnchor
End Property

Public Property Let Anchor(val As AnchorStyles)
   myAnchor = val
End Property

Public Function Move(Left As Single, Optional Top As Single = -1, Optional Width As Single = -1, Optional Height As Single = -1)
   Me.Left = Left
   If Top <> -1 Then Me.Top = Top
   If Width <> -1 Then Me.Width = Width
   If Height <> -1 Then Me.Height = Height
End Function

Public Property Get ToolTip() As String 
    ToolTip = Parent.getToolTipText()
End Property

Public Property Let ToolTip(v As String)
	If Len(v) = 0 Then 
	    Parent.setToolTipText(Null)
    Else
	    Parent.setToolTipText(v)
    End If
End Property

Public Property Get Enabled() As Boolean 
   Enabled = Base.isEnabled()
End Property

Public Property Let Enabled(v As Boolean)
   Call Base.setEnabled(v)
End Property

Public Property Get Visible() As Boolean 
    Visible = Base.isVisible()
End Property

Public Property Let Visible(v As Boolean)
    Base.setVisible v
End Property

Public Property Get Tag() As String 
   Tag = myTag
End Property

Public Property Let Tag(v As String)
   myTag = v
End Property

Public Property Get MousePointer() As MousePointerConstants
   MousePointer = JCursorToVBMousePointer(Parent.getCursor())
End Property

Public Property Let MousePointer(v As MousePointerConstants)
   Call Parent.setCursor(VBMousePointerToJCursor(v))
End Property

Public Property Get MouseIcon() As #IResource
   MouseIcon = myMouseIcon
End Property

Public Property Let MouseIcon(v As #IResource)
   myMouseIcon = v
   Call Parent.setCursor(VBMouseIconToJCursor(v, Me))
End Property

Public Property Get CanGetFocus() As Boolean
   CanGetFocus = Parent.isFocusable
End Property

Public Property Let CanGetFocus(v As Boolean)
   Parent.setFocusable v
End Property

Public Sub SetFocus()
   Parent.requestFocus 
End Sub

Public Sub Refresh()
   Call Parent.setSize(Parent.getSize())
   Call Parent.invalidate()
   Call Parent.repaint(0, 0, 0, Me.Width, Me.Height)
End Sub

Public Sub ResizeTriggerInit(w As Single, h As Single)
   hostSavedWidth = w
   hostSavedHeight = h
   mySavedWidth = Me.Width
   mySavedHeight = Me.Height
   isResizeTriggerInitialized = True
End Sub

Public Sub ResizeTrigger(w As Single, h As Single)
   If isResizeTriggerInitialized = True And isLeftInitialized = True And isTopInitialized = True Then
      Select Case myAnchor And 12 ' horizontal re-allignment
        ' 12 in decimal = 1100 in binary. binary addition - eliminates Top and Bottom
      Case AnchorStyles.vbLeft
         ' do nothing
      Case AnchorStyles.vbRight
        Me.Left = w-hostSavedWidth+mySavedLeft
      Case AnchorStyles.vbLeftRight
        Me.Width = w-hostSavedWidth+mySavedWidth
      Case AnchorStyles.vbNone
        Me.Left = (w-mySavedWidth)/(hostSavedWidth-mySavedWidth)*mySavedLeft
      End Select

      Select Case myAnchor And 3 ' vertical re-allignment
        ' 3 in decimal = 0011 in binary. binary addition - eliminates Left and Right
      Case AnchorStyles.vbTop
         ' do nothing
      Case AnchorStyles.vbBottom
         Me.Top = h-hostSavedHeight+mySavedTop
      Case AnchorStyles.vbTopBottom
         Me.Height = h-hostSavedHeight+mySavedHeight
      Case AnchorStyles.vbNone
         Me.Top = (h-mySavedHeight)/(hostSavedHeight-mySavedHeight)*mySavedTop
      End Select
   End If
End Sub

]]></Source><Param Name="(Name)" Value="Spinner"/><Param Name="(SuperClass)" Value="javax/swing/JSpinner"/><Param Name="(NameSpace)" Value="VB"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/></SourceFile>
