<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit
Implements IJabacoClass
Implements IJabacoControl

Dim myBorderWidth As Long
Dim myDrawMode As DrawModeConstants
Dim myShape As ShapeConstants
Dim myFillColor As Long 
Dim myBackStyle As BackStyleConstants
Dim myAntiAliasing As Boolean 
Dim myTag As String

' *** Variables for Anchor and resizing ***
Private myAnchor As AnchorStyles = AnchorStyles.vbTopLeft
Private mySavedWidth As Single
Private mySavedHeight As Single
Private mySavedLeft As Single
Private mySavedTop As Single
Private hostSavedWidth As Single
Private hostSavedHeight As Single
Private isResizeTriggerInitialized As Boolean = False
Private isLeftInitialized As Boolean = False
Private isTopInitialized As Boolean = False


Public Sub paintComponent(g As #Graphics)
   If g = Nothing Then Exit Sub
   Dim g2d As #Graphics2D 
   g2d = Cast(g, #Graphics2D)
   
   If myAntiAliasing Then
      Call g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)
   End If
   
   Dim myNewBorderWidth As Long
   myNewBorderWidth = myBorderWidth
   If myNewBorderWidth < 1 Then myNewBorderWidth = 1
   Dim tmpValue As Long
   'tmpValue = IIF (Width > Height, Height, Width)  ' don't work. don't know why, so I use the long way.
   If Width > Height Then
     tmpValue = Height
   Else
     tmpValue = Width
   End If
   If tmpValue < myNewBorderWidth*2 Then
     myNewBorderWidth = tmpValue/2
   End If
   
   Call g2d.setStroke(New java#awt#BasicStroke(myNewBorderWidth))
   
   Dim myLeft As Long, myTop As Long, myWidth As Long, myHeight As Long
   myLeft = (myNewBorderWidth / 2)
   myTop = (myNewBorderWidth / 2)
   myWidth = Width - 1 - (myNewBorderWidth)
   myHeight = Height - 1 - (myNewBorderWidth)
   
   
   If myShape = vbShapeSquare Or myShape = vbShapeCircle Or myShape = vbShapeRoundedSquare Then
      Dim myMemWidth As Long = myWidth, myMemHeight As Long = myHeight
      myWidth = IIF(myWidth > myHeight, myHeight, myWidth) 
      myHeight = IIF(myWidth > myHeight, myHeight, myWidth)
      myLeft = myLeft + (myMemWidth - myWidth) / 2 
      myTop = myTop + (myMemHeight - myHeight) / 2
   End If
   
   
   Select Case myShape
      Case vbShapeRectangle, vbShapeSquare
         If myBackStyle = vbSolid Then
            Call g2d.setColor(Parent.getBackground())
            g2d.fillRect myLeft, myTop, myWidth + 1, myHeight + 1
         End If
         Call g2d.setColor(Parent.getForeground())
         g2d.drawRect myLeft, myTop, myWidth, myHeight
      Case vbShapeOval, vbShapeCircle
         If myBackStyle = vbSolid Then
            Call g2d.setColor(Parent.getBackground())
            g2d.fillOval myLeft, myTop, myWidth + 1, myHeight + 1
         End If
         Call g2d.setColor(Parent.getForeground())
         g2d.drawOval myLeft, myTop, myWidth, myHeight
      Case vbShapeRoundedRectangle, vbShapeRoundedSquare
         Dim myDiameter As Long
         myDiameter=IIF (Width > Height, Height/4, Width/4)
         Dim myRadiusBorderWidth As Long
         myRadiusBorderWidth = IIF (myNewBorderWidth*2 > myDiameter, myDiameter/2, myNewBorderWidth)
         Dim myRLeft As Long, myRTop As Long, myRWidth As Long, myRHeight As Long
         myRLeft = myLeft-myNewBorderWidth/2+myRadiusBorderWidth/2
         myRTop = myTop-myNewBorderWidth/2+myRadiusBorderWidth/2
         myRWidth = myRLeft + myWidth+1+myNewBorderWidth-myDiameter
         myRHeight = myRTop + myHeight+1+myNewBorderWidth-myDiameter
         If myBackStyle = vbSolid Then
            Call g2d.setColor(Parent.getBackground())
            'g2d.fillRect myLeft-myNewBorderWidth/2+myDiameter/2-1, myTop, myWidth+2-myDiameter+myNewBorderWidth, myHeight+1-myNewBorderWidth/2
            'g2d.fillRect myLeft, myTop-myNewBorderWidth/2+myDiameter/2-1, myWidth+1-myNewBorderWidth/2, myHeight+2-myDiameter+myNewBorderWidth
            g2d.fillRect myLeft-myNewBorderWidth/2+myDiameter/2-1, myTop-myNewBorderWidth/2+1, myWidth-myDiameter+myNewBorderWidth+2, myHeight+myNewBorderWidth-1
            g2d.fillRect myLeft-myNewBorderWidth/2+1, myTop-myNewBorderWidth/2+myDiameter/2-1, myWidth+myNewBorderWidth-1, myHeight-myDiameter+myNewBorderWidth+2
            g2d.fillArc myRLeft, myRTop, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 90, 90
            g2d.fillArc myRWidth, myRTop, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 0, 90
            g2d.fillArc myRLeft, myRHeight, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 180, 90
            g2d.fillArc myRWidth, myRHeight, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 270, 90
         End IF
         Call g2d.setColor(Parent.getForeground())
         g2d.drawLine myLeft+myDiameter/2, myTop, myLeft+myWidth-myDiameter/2+1, myTop
         g2d.drawLine myLeft+myDiameter/2, myTop+myHeight, myLeft+myWidth-myDiameter/2+1, myTop+myHeight
         g2d.drawLine myLeft, myTop+myDiameter/2, myLeft, myTop+myHeight-myDiameter/2+1
         g2d.drawLine myLeft+myWidth, myTop+myDiameter/2, myLeft+myWidth, myTop+myHeight-myDiameter/2+1
         Call g2d.setStroke(New java#awt#BasicStroke(myRadiusBorderWidth, java#awt#BasicStroke.CAP_SQUARE, java#awt#BasicStroke.JOIN_ROUND))
         g2d.drawArc myRLeft, myRTop, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 90, 90
         g2d.drawArc myRWidth, myRTop, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 0, 90
         g2d.drawArc myRLeft, myRHeight, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 180, 90
         g2d.drawArc myRWidth, myRHeight, myDiameter-1-myRadiusBorderWidth, myDiameter-1-myRadiusBorderWidth, 270, 90
   End Select
   
   ' Cloud drawing specified in presetShapeDefinitions.xml in ECMA-376 of the
   ' OfficeOpenXML specification.
   ' http://www.mail-archive.com/users@openoffice.apache.org/msg01962.html
   If myShape = vbShapeCloud Then

         ''g2d.setColor(Color.red)
         ''g2d.drawRect(0,0,Width-2 , Height-2)
         If myBackStyle = vbSolid Then
            g2d.setColor(Parent.getBackground())
            g2d.fillOval(191 / 1898 * (Width-1),97 / 1044 * (Height-1),576 / 1898 * (Width-1),448 / 1044 * (Height-1))
            g2d.fillOval(0 / 1898 * (Width-1),352 / 1044 * (Height-1),381 / 1898 * (Width-1),279 / 1044 * (Height-1))
            g2d.fillOval(57 / 1898 * (Width-1),571 / 1044 * (Height-1),384 / 1898 * (Width-1),291 / 1044 * (Height-1))
            g2d.fillOval(209 / 1898 * (Width-1),600 / 1044 * (Height-1),617 / 1898 * (Width-1),383 / 1044 * (Height-1))
            g2d.fillOval(688 / 1898 * (Width-1),622 / 1044 * (Height-1),599 / 1898 * (Width-1),422 / 1044 * (Height-1))
            g2d.fillOval(1150 / 1898 * (Width-1),534 / 1044 * (Height-1),499 / 1898 * (Width-1),377 / 1044 * (Height-1))
            g2d.fillOval(1379 / 1898 * (Width-1),303 / 1044 * (Height-1),519 / 1898 * (Width-1),413 / 1044 * (Height-1))
            g2d.fillOval(1331 / 1898 * (Width-1),122 / 1044 * (Height-1),529 / 1898 * (Width-1),363 / 1044 * (Height-1))
            g2d.fillOval(1248 / 1898 * (Width-1),0 / 1044 * (Height-1),456 / 1898 * (Width-1),392 / 1044 * (Height-1))
            g2d.fillOval(935 / 1898 * (Width-1),0 / 1044 * (Height-1),449 / 1898 * (Width-1),421 / 1044 * (Height-1))
            g2d.fillOval(597 / 1898 * (Width-1),36 / 1044 * (Height-1),474 / 1898 * (Width-1),388 / 1044 * (Height-1))
            g2d.fillRect(300 / 1898 * (Width-1),270 / 1044 * (Height-1),1150 / 1898 * (Width-1),500 / 1044 * (Height-1))
         End If
  
         g2d.setStroke(New BasicStroke(myBorderWidth, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND))
  
         g2d.setColor(Parent.getForeground())
         g2d.drawArc(191 / 1898 * (Width-1) + myBorderWidth/2,97 / 1044 * (Height-1) + myBorderWidth/2,576 / 1898 * (Width-1)- myBorderWidth,448 / 1044 * (Height-1)- myBorderWidth,47,154)
         g2d.drawArc(0 / 1898 * (Width-1) + myBorderWidth/2,352 / 1044 * (Height-1) + myBorderWidth/2,381 / 1898 * (Width-1)- myBorderWidth,279 / 1044 * (Height-1)- myBorderWidth,89,181)
         g2d.drawArc(57 / 1898 * (Width-1) + myBorderWidth/2,571 / 1044 * (Height-1) + myBorderWidth/2,384 / 1898 * (Width-1)- myBorderWidth,291 / 1044 * (Height-1)- myBorderWidth,137,157)
         g2d.drawArc(209 / 1898 * (Width-1) + myBorderWidth/2,600 / 1044 * (Height-1) + myBorderWidth/2,617 / 1898 * (Width-1)- myBorderWidth,383 / 1044 * (Height-1)- myBorderWidth,201,111)
         g2d.drawArc(688 / 1898 * (Width-1) + myBorderWidth/2,622 / 1044 * (Height-1) + myBorderWidth/2,599 / 1898 * (Width-1)- myBorderWidth,422 / 1044 * (Height-1)- myBorderWidth,198,161)
         g2d.drawArc(1150 / 1898 * (Width-1) + myBorderWidth/2,534 / 1044 * (Height-1) + myBorderWidth/2,499 / 1898 * (Width-1)- myBorderWidth,377 / 1044 * (Height-1)- myBorderWidth,240,192)
         g2d.drawArc(1379 / 1898 * (Width-1) + myBorderWidth/2,303 / 1044 * (Height-1) + myBorderWidth/2,519 / 1898 * (Width-1)- myBorderWidth,413 / 1044 * (Height-1)- myBorderWidth,272,128)
         g2d.drawArc(1331 / 1898 * (Width-1) + myBorderWidth/2,122 / 1044 * (Height-1) + myBorderWidth/2,529 / 1898 * (Width-1)- myBorderWidth,363 / 1044 * (Height-1)- myBorderWidth,308,121)
         g2d.drawArc(1248 / 1898 * (Width-1) + myBorderWidth/2,0 / 1044 * (Height-1) + myBorderWidth/2,456 / 1898 * (Width-1)- myBorderWidth,392 / 1044 * (Height-1)- myBorderWidth,12,128)
         g2d.drawArc(935 / 1898 * (Width-1) + myBorderWidth/2,0 / 1044 * (Height-1) + myBorderWidth/2,449 / 1898 * (Width-1)- myBorderWidth,421 / 1044 * (Height-1)- myBorderWidth,46,103)
         g2d.drawArc(597 / 1898 * (Width-1) + myBorderWidth/2,36 / 1044 * (Height-1) + myBorderWidth/2,474 / 1898 * (Width-1)- myBorderWidth,388 / 1044 * (Height-1)- myBorderWidth,51,98)



   End If
   'g2d.drawLine 0, 0, mX2, mY2
   g2d.dispose 
End Sub

Public Property Get Parent() As #JComponent 
   Parent = Base
End Property

Public Property Get AntiAliasing() As Boolean
   AntiAliasing = myAntiAliasing
End Property

Public Property Let AntiAliasing(v As Boolean)
   myAntiAliasing = v
End Property

Public Property Get DrawMode() As DrawModeConstants
   DrawMode = myDrawMode
End Property

Public Property Let DrawMode(v As DrawModeConstants)
   myDrawMode = v
   Call Me.Refresh()
End Property

Public Property Get Shape() As ShapeConstants
   Shape = myShape
End Property

Public Property Let Shape(v As ShapeConstants)
   myShape = v
   Call Me.Refresh()
End Property

Public Property Get BackColor() As Long
   BackColor = ColortoRGB(Base.getBackground())
End Property

Public Property Let BackColor(v As Long)
   Base.setBackground(RGBtoColor(v))
End Property

Public Property Get BorderColor() As Long
   BorderColor = ColorToRGB(Parent.getForeground())
End Property

Public Property Let BorderColor(v As Long)
   Call Parent.setForeground(RGBToColor(v))
End Property

Public Property Get FillColor() As Long
   FillColor = myFillColor
End Property

Public Property Let FillColor(v As Long)
   myFillColor = v
   Call Me.Refresh()
End Property

Public Property Get BackStyle() As BackStyleConstants
   BackStyle = myBackStyle
End Property

Public Property Let BackStyle(v As BackStyleConstants)
   myBackStyle = v
   Call Me.Refresh()
End Property

Public Property Get BorderWidth() As Long
   BorderWidth = myBorderWidth
End Property

Public Property Let BorderWidth(v As Long)
   myBorderWidth = v
   Call Me.Refresh()
End Property

Public Property Get Width() As Single
    Width = Me.getSize.Width
End Property

Public Property Let Width(v As Single)
    Me.setSize(v, Me.getSize.Height)
End Property

Public Property Get Height() As Single
    Height = Me.getSize.Height
End Property

Public Property Let Height(v As Single)
    Me.setSize(Me.getSize.Width, v)
End Property

Public Property Get Left() As Single
    Left = Me.getLocation.x
End Property

Public Property Let Left(v As Single)
    If isLeftInitialized = False Then
       mySavedLeft = v
       isLeftInitialized = True
    End If
    Me.setLocation(v, Me.getLocation.y)
End Property

Public Property Get Top() As Single
    Top = Me.getLocation.y
End Property

Public Property Let Top(v As Single)
    If isTopInitialized = False Then
       mySavedTop = v
       isTopInitialized = True
    End If
    Me.setLocation(Me.getLocation.x, v)
End Property

Public Property Get Anchor() AS AnchorStyles
   Anchor = myAnchor
End Property

Public Property Let Anchor(val As AnchorStyles)
   myAnchor = val
End Property

Public Function Move(Left As Single, Optional Top As Single = -1, Optional Width As Single = -1, Optional Height As Single = -1)
   Me.Left = Left
   If Top <> -1 Then Me.Top = Top
   If Width <> -1 Then Me.Width = Width
   If Height <> -1 Then Me.Height = Height
End Function

Public Property Get Visible() As Boolean 
    Visible = Base.isVisible()
End Property

Public Property Let Visible(v As Boolean)
    Base.setVisible v
End Property

Public Property Get Tag() As String 
   Tag = myTag
End Property

Public Property Let Tag(v As String)
   myTag = v
End Property

Public Sub Refresh()
   Call Parent.invalidate()
   Call Parent.repaint(0, 0, 0, Me.Width, Me.Height)
End Sub

Public Sub ResizeTriggerInit(w As Single, h As Single)
   hostSavedWidth = w
   hostSavedHeight = h
   mySavedWidth = Me.Width
   mySavedHeight = Me.Height
   isResizeTriggerInitialized = True
End Sub

Public Sub ResizeTrigger(w As Single, h As Single)
   If isResizeTriggerInitialized = True And isLeftInitialized = True And isTopInitialized = True Then
      Select Case myAnchor And 12 ' horizontal re-allignment
        ' 12 in decimal = 1100 in binary. binary addition - eliminates Top and Bottom
      Case AnchorStyles.vbLeft
         ' do nothing
      Case AnchorStyles.vbRight
        Me.Left = w-hostSavedWidth+mySavedLeft
      Case AnchorStyles.vbLeftRight
        Me.Width = w-hostSavedWidth+mySavedWidth
      Case AnchorStyles.vbNone
        Me.Left = (w-mySavedWidth)/(hostSavedWidth-mySavedWidth)*mySavedLeft
      End Select

      Select Case myAnchor And 3 ' vertical re-allignment
        ' 3 in decimal = 0011 in binary. binary addition - eliminates Left and Right
      Case AnchorStyles.vbTop
         ' do nothing
      Case AnchorStyles.vbBottom
         Me.Top = h-hostSavedHeight+mySavedTop
      Case AnchorStyles.vbTopBottom
         Me.Height = h-hostSavedHeight+mySavedHeight
      Case AnchorStyles.vbNone
         Me.Top = (h-mySavedHeight)/(hostSavedHeight-mySavedHeight)*mySavedTop
      End Select
   End If
End Sub

]]></Source><Param Name="(Name)" Value="Shape"/><Param Name="(SuperClass)" Value="javax/swing/JComponent"/><Param Name="(NameSpace)" Value="VB"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/></SourceFile>
